{
    package kql
}

////////////////////////////////////////////////////////
// ast
////////////////////////////////////////////////////////

Root <-
    _ nodes:Nodes _ {
        return root(nodes, c.text, c.pos)
    }

Nodes <-
    head:Element tail:(_ Element _)* {
      return nodes(head, tail)
    }

Element <-
        Groups /
        PropertyRestrictions /
        BooleanOperators /
        FreeTextKeywords

////////////////////////////////////////////////////////
// nesting
////////////////////////////////////////////////////////

Groups <-
    Group /
    PropertyGroup

Group <-
    "(" v:Nodes ")" {
        return group(v, c.text, c.pos)
    }

PropertyGroup <-
    k:Char+ (ColonOperator / EqualOperator) "(" v:FreeTextKeywords+ ")" {
        return propertyGroup(k, v, c.text, c.pos)
    }

////////////////////////////////////////////////////////
// property restrictions
////////////////////////////////////////////////////////

PropertyRestrictions <-
    TextPropertyRestriction

TextPropertyRestriction <-
    k:Char+ (ColonOperator / EqualOperator) v:(String / [^ ()]+){
        return textPropertyRestriction(k, v, c.text, c.pos)
    }

////////////////////////////////////////////////////////
// free text-keywords
////////////////////////////////////////////////////////

FreeTextKeywords <-
    (Phrase / Word)

Phrase <-
     ColonOperator? _ v:String _ ColonOperator? {
        return phrase(v, c.text, c.pos)
    }

Word <-
     ColonOperator? _ v:[^ :()]+ _ ColonOperator? {
        return word(v, c.text, c.pos)
    }

////////////////////////////////////////////////////////
// operators
////////////////////////////////////////////////////////

BooleanOperators <-
    ("AND" / "OR" / "NOT") {
        return booleanOperator(c.text, c.pos)
    }

ColonOperator <-
    ":" {
        return c.text, nil
    }

EqualOperator <-
    "=" {
        return c.text, nil
    }

////////////////////////////////////////////////////////
// misc
////////////////////////////////////////////////////////

Char <-
    [A-Za-z] {
        return c.text, nil
    }

String <-
    '"' v:[^"]* '"' {
        return v, nil
    }

_ <-
    [ \t]*
